
import java.util.Arrays;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author kobe0
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ValuesInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        IndexInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        FfcsATLabel = new javax.swing.JLabel();
        SstfATLabel = new javax.swing.JLabel();
        ScanATLabel = new javax.swing.JLabel();
        LookATLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        RecommendedResultLabel = new javax.swing.JLabel();
        CalculateBtn = new javax.swing.JButton();
        ffcsRes = new javax.swing.JLabel();
        sstfRes = new javax.swing.JLabel();
        scanRes = new javax.swing.JLabel();
        lookRes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(234, 234, 234));

        ValuesInput.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ValuesInput.setMargin(new java.awt.Insets(15, 15, 15, 15));
        ValuesInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValuesInputActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Values");

        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Enter values separated with comma ( , ) without space after. Can only process up to the value of 0-200");

        IndexInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndexInputActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Starting Position");

        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Enter the current head position");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Average seek times");

        FfcsATLabel.setForeground(new java.awt.Color(0, 0, 0));
        FfcsATLabel.setText("FCFS:");

        SstfATLabel.setForeground(new java.awt.Color(0, 0, 0));
        SstfATLabel.setText("SSTF:");

        ScanATLabel.setForeground(new java.awt.Color(0, 0, 0));
        ScanATLabel.setText("SCAN:");

        LookATLabel.setForeground(new java.awt.Color(0, 0, 0));
        LookATLabel.setText("LOOK:");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Recommended algorithm to use");

        RecommendedResultLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        RecommendedResultLabel.setForeground(new java.awt.Color(0, 0, 0));
        RecommendedResultLabel.setText("Result");

        CalculateBtn.setText("Calculate");
        CalculateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CalculateBtnMouseClicked(evt);
            }
        });
        CalculateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateBtnActionPerformed(evt);
            }
        });

        ffcsRes.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ffcsRes.setForeground(new java.awt.Color(0, 0, 0));
        ffcsRes.setText("0");

        sstfRes.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sstfRes.setForeground(new java.awt.Color(0, 0, 0));
        sstfRes.setText("0");

        scanRes.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        scanRes.setForeground(new java.awt.Color(0, 0, 0));
        scanRes.setText("0");

        lookRes.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lookRes.setForeground(new java.awt.Color(0, 0, 0));
        lookRes.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(CalculateBtn)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(IndexInput)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(ValuesInput))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RecommendedResultLabel)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(LookATLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lookRes))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(FfcsATLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ffcsRes))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SstfATLabel)
                                    .addComponent(ScanATLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scanRes)
                                    .addComponent(sstfRes))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ValuesInput, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(8, 8, 8)
                .addComponent(IndexInput, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CalculateBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FfcsATLabel)
                    .addComponent(ffcsRes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SstfATLabel)
                    .addComponent(sstfRes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ScanATLabel)
                    .addComponent(scanRes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LookATLabel)
                    .addComponent(lookRes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(RecommendedResultLabel)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public static int[] extractIntegers(String input) {
        String[] tokens = input.split(",");
        int[] nums = new int[Math.min(tokens.length, 50)];

        // Extract integers from the valuesString
        for (int i = 0; i < nums.length; i++) {
            try {
                nums[i] = Integer.parseInt(tokens[i]);
            } catch (NumberFormatException e) {
                // If a token cannot be parsed as an integer, return null
                System.out.println(e);
                return null;
            }
        }
        // Return the extracted integers
            return nums;
    }
    
    public static double fcfs(int[] values, int head) {
        int averageDivisor = 0;
        int totalSeekTime = Math.abs(values[0] - head);
        for (int i = 1; i < values.length; i++) {
            totalSeekTime += Math.abs(values[i] - values[i-1]);
            averageDivisor++;
        }
        return totalSeekTime/averageDivisor;
    }   

    public static double sstf(int[] requests, int head) {
        int averageDivisor = 0;
        int totalSeekTime = 0;
        int currentPosition = head;
        boolean[] visited = new boolean[requests.length];

        for (int i = 0; i < requests.length; i++) {
            int closestIndex = findClosest(requests, currentPosition, visited);
            int closest = requests[closestIndex];
            visited[closestIndex] = true;
            totalSeekTime += Math.abs(closest - currentPosition);
            currentPosition = closest;
            averageDivisor++;
        }

        double avgSeekTime = (double) totalSeekTime / requests.length;
        return totalSeekTime/averageDivisor;
    }

    private static int findClosest(int[] requests, int currentPosition, boolean[] visited) {
        int minDistance = Integer.MAX_VALUE;
        int closestIndex = -1;

        for (int i = 0; i < requests.length; i++) {
            int distance = Math.abs(requests[i] - currentPosition);
            if (distance < minDistance && !visited[i]) {
                minDistance = distance;
                closestIndex = i;
            }
        }

        return closestIndex;
    }



    
public static double scan(int[] values, int head) {
    int maxCylinder = 200;
    int totalSeekTime = 0;
    int endOfArray = 999;
    int averageDivisor = 0;
    
   int[] newArr = Arrays.copyOf(values, values.length + 3);
    // add the new value to the end of the array
    newArr[newArr.length - 3] = head;
    newArr[newArr.length - 2] = 0;
    newArr[newArr.length - 1] = endOfArray;
    
    Arrays.sort(newArr);
    
    int headIndex = 0;
    int resumeIndex = 0;
    
    //find the current position of the head
    while(newArr[headIndex] != head){
        headIndex++;
        resumeIndex++;
    }
    
    //add seek times upto zero
    for(int i = headIndex; i > 0; i--){
        totalSeekTime = totalSeekTime + Math.abs(newArr[i] - newArr[i-1]);
        averageDivisor++;
    }
    
    //start from zero
    totalSeekTime = totalSeekTime + Math.abs(newArr[0] - newArr[resumeIndex+1]);
    averageDivisor = averageDivisor + 1;
    
    //add seek time upto last entry
    for(int i = resumeIndex+1 ; i < newArr.length - 1; i++){
        if(newArr[i+1] != 999){
            totalSeekTime += Math.abs(newArr[i] - newArr[i+1]);
            averageDivisor++;
        }
    }
    
    System.out.println(averageDivisor);
    
    return totalSeekTime/averageDivisor;
}

public static double look(int[] requests, int head) {
        int maxCylinder = 200;
    int totalSeekTime = 0;
    int endOfArray = 999;
    int averageDivisor = 0;
    
   int[] newArr = Arrays.copyOf(requests, requests.length + 2);
        // add the new value to the end of the array
    newArr[newArr.length - 2] = head;
    newArr[newArr.length - 1] = endOfArray;
    
    Arrays.sort(newArr);
    
    int headIndex = 0;
    int resumeIndex = 0;
    int nextAfterLastIndex = 1;
    
    //find the current position of the head
    while(newArr[headIndex] != head){
        headIndex++;
        resumeIndex++;
        nextAfterLastIndex++;
    }
    
    //add seek times upto zero
    for(int i = headIndex; i > 0; i--){
        totalSeekTime = totalSeekTime + Math.abs(newArr[i] - newArr[i-1]);
        averageDivisor++;
    }
    
    //from last index to nextAfterLastIndex
    totalSeekTime = totalSeekTime + Math.abs(newArr[0] - newArr[nextAfterLastIndex]);
    averageDivisor = averageDivisor + 1;
    
    //add seek time upto last entry
    for(int i = nextAfterLastIndex ; i < newArr.length - 1; i++){
        if(newArr[i+1] != 999){
            totalSeekTime += Math.abs(newArr[i] - newArr[i+1]);
            averageDivisor++;
        }
    }
    System.out.println(averageDivisor);
    return totalSeekTime/averageDivisor;
}

    
    private void ValuesInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValuesInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ValuesInputActionPerformed

    private void IndexInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndexInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IndexInputActionPerformed

    private void CalculateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CalculateBtnActionPerformed

    private void CalculateBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CalculateBtnMouseClicked
        // TODO add your handling code here:
        String valuesString = ValuesInput.getText();
        String indexString = IndexInput.getText();
        
        int[] values = extractIntegers(valuesString);
        int index;
        try {
            index = Integer.parseInt(indexString);
            
            double ffcsResult = fcfs(values, index);
            double sstfResult = sstf(values, index);
            double scanResult = scan(values, index);
            double lookResult = look(values, index);
            
            System.out.println(ffcsResult);
            System.out.println(sstfResult);
            
            System.out.println(scanResult);
            System.out.println(lookResult);
            
            ffcsRes.setText(Integer.toString((int) ffcsResult));
            sstfRes.setText(Integer.toString((int) sstfResult));
            scanRes.setText(Integer.toString((int) scanResult));
            lookRes.setText(Integer.toString((int) lookResult));
            
            double lowest = ffcsResult; // Assume value1 is the lowest initially
            int swtch = 0;

            // Compare value2 with lowest
            if (sstfResult < lowest) {
                lowest = sstfResult;
                swtch = 1;
            }

            // Compare value3 with lowest
            if (scanResult < lowest) {
                lowest = scanResult;
                swtch = 2;
            }

            // Compare value4 with lowest
            if (lookResult < lowest) {
                lowest = lookResult;
                swtch = 3;
            }
            
            switch(swtch){
                case 0 -> {
                    RecommendedResultLabel.setText("First Come First Serve");
                }
                case 1 -> {
                    RecommendedResultLabel.setText("Shortest Seek Time First");
                }
                case 2 -> {
                    RecommendedResultLabel.setText("Scan");
                }
                case 3 -> {
                    RecommendedResultLabel.setText("Look");
                }
                    
            }
                    
        } catch (NumberFormatException e) {
            System.out.println("Invalid index format!");
        }
        
        
        
    }//GEN-LAST:event_CalculateBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CalculateBtn;
    private javax.swing.JLabel FfcsATLabel;
    private javax.swing.JTextField IndexInput;
    private javax.swing.JLabel LookATLabel;
    private javax.swing.JLabel RecommendedResultLabel;
    private javax.swing.JLabel ScanATLabel;
    private javax.swing.JLabel SstfATLabel;
    private javax.swing.JTextField ValuesInput;
    private javax.swing.JLabel ffcsRes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lookRes;
    private javax.swing.JLabel scanRes;
    private javax.swing.JLabel sstfRes;
    // End of variables declaration//GEN-END:variables
}
